#!/usr/bin/env python3

"""Converts a PDF text file to a mp3 audio file."""

import argparse
import multiprocessing
import os
import os.path
import sys
import time

from typing import Dict

# global variables
has_espeakng = True
has_eyed3 = True
has_google_texttospeech = True
has_poppler = True
has_progress = True
has_pydub = True
has_tesseract = True

# PyPi modules

# check for progress
try:
    from progress.bar import Bar as Progressbar
    from progress.spinner import Spinner
except ImportError:
    print("[EE] Error: please install progress!")
    has_progress = False
    sys.exit(1)

# check for poppler
try:
    import poppler
except ImportError:
    print("[EE] Error: libpoppler is required but could not be found!")
    has_poppler = False
    sys.exit(1)

# check for pytesseract
try:
    from PIL import Image
except ImportError:
    import Image
try:
    import pytesseract
except ImportError:
    has_tesseract = False

# check for espeak-ng
try:
    from espeakng import ESpeakNG
except ImportError:
    has_espeakng = False

# check for google text-to-speech
try:
    from google.oauth2 import service_account
    from google.cloud import texttospeech
except ImportError:
    has_google_texttospeech = False

# check for eyed3
try:
    import eyed3
except ImportError:
    has_eyed3 = False

# check for pydub
try:
    from pydub import AudioSegment
except ImportError:
    has_pydub = False


# methods

def parse_cmd_line_arguments() -> Dict:
    """parse command line arguments"""
    parser = argparse.ArgumentParser(prog='pdf2mp3', description='Converts a PDF text file to a MP3 audio file.',
                                     add_help=True)

    required = parser.add_argument_group('required arguments')
    required.add_argument('--input', metavar='<file>', type=str, required=True, nargs=1, help='Source PDF file')
    required.add_argument('--output', metavar='<file>', type=str, required=True, nargs=1,
                          help='Destination MP3 file')
    parser.add_argument('--page-start', metavar='<N>', type=int, required=False, nargs=1,
                        help='Page to begin with, default: 1')
    parser.add_argument('--page-end', metavar='<N>', type=int, required=False, nargs=1,
                        help='Page to end on, default: last page')
    parser.add_argument('--dpi', metavar='<num>', type=int, required=False, nargs=1,
                        help='DPI for the page renderer, default: 150')
    parser.add_argument('--tesseract', metavar='<lang>', type=str, required=False, nargs=1,
                        help='Use Tesseract OCR with given language')
    parser.add_argument('--google-oauth2-key', metavar='<file>', type=str, required=False, nargs=1,
                        help='Use Google Text-To-Speech with the <key> file')
    parser.add_argument('--google-texttospeech-language-code', metavar='<code>', type=str, required=False, nargs=1,
                        help='BCP-47 language tag, e.g. "en-US" or "de-DE"')
    parser.add_argument('--google-texttospeech-voice-name', metavar='<voice>', type=str, required=False, nargs=1,
                        help='Google Text-To-Speech voice name')
    parser.add_argument('--espeak-ng', metavar='<lang>', type=str, required=False, nargs=1,
                        help='Use Espeak NG with the given language')
    parser.add_argument('--sidecar', metavar='<file>', type=str, required=False, help='Saves the text to a txt file')
    parser.add_argument('--mp3-artist', metavar='<name>', type=str, required=False, help='ID3 artist')
    parser.add_argument('--mp3-title', metavar='<name>', type=str, required=False, help='ID3 title')

    # Namespace -> Dict
    return vars(parser.parse_args())


def poppler_get_num_pages(file: str) -> int:
    """Gets the number of pages"""
    pdf = poppler.load_from_file(file)
    return pdf.pages


def poppler_get_text(file: str, page: int) -> str:
    """Get text from a PDF, if it has a text layer"""
    pdf = poppler.load_from_file(file)
    page = pdf.create_page(page - 1)

    return page.text()


def poppler_convert_to_image(file: str, dpi: int, page: int) -> None:
    """Convert a pdf to PNG files (one file per page)"""
    pdf = poppler.load_from_file(file)
    renderer = poppler.PageRenderer()
    pdf_page = pdf.create_page(page - 1)
    image = renderer.render_page(pdf_page, xres=dpi, yres=dpi)
    image.save(f'page-{page}.png', 'PNG')


def tesseract_scan_page(page: int, language: str) -> str:
    """Scan all pages"""
    text = pytesseract.image_to_string(Image.open(f'page-{page}.png'), lang=language)
    os.unlink(f'page-{page}.png')
    return text


def espeak_ng_text_to_wav(text: str, voice: str, page: int) -> None:
    """Convert text to wav"""
    esng = ESpeakNG()
    esng.voice = voice
    wav = esng.synth_wav(text)
    with open(f'page-{page}.wav', 'wb') as fd:
        fd.write(wav)


def pydub_convert_to_mp3(page: int) -> None:
    """Convert wav to mp3"""
    sound = AudioSegment.from_wav(f'page-{page}.wav')
    sound.export(f'page-{page}.mp3', format="mp3")
    os.unlink(f'page-{page}.wav')


def pydub_concat_mp3s(mp3_file: str, page_start: int, page_end: int) -> None:
    """Concats mp3s"""
    try:
        from pydub import AudioSegment
    except ImportError:
        print("[EE] Error: please install pydub")
        sys.exit(1)

    def spinner(s) -> None:
        while True:
            s.next()
            time.sleep(0.05)

    def worker(mp3_file, page_start, page_end):
        combined = AudioSegment.empty()

        for page in range(page_start, page_end + 1):
            combined += AudioSegment.from_mp3(f'page-{page}.mp3')

        combined.export(mp3_file, format="mp3")

        for page in range(page_start, page_end + 1):
            os.unlink(f'page-{page}.mp3')

    s = Spinner('[!!] pydub: concatenating mp3s ')
    st = multiprocessing.Process(target=spinner, args=(s,))
    wt = multiprocessing.Process(target=worker, args=(mp3_file, page_start, page_end))
    st.start()
    wt.start()
    wt.join()
    st.terminate()
    s.finish()


def google_texttospeech(text: str, output: str, key: str, language_code: str, voice_name: str) -> None:
    """Google Cloud Text-To-Speech"""
    credentials = service_account.Credentials.from_service_account_file(key)

    client = texttospeech.TextToSpeechClient(credentials=credentials)
    synthesis_input = texttospeech.SynthesisInput(text=text)
    voice = texttospeech.VoiceSelectionParams(
        language_code=language_code,
        name=voice_name
    )
    audio_config = texttospeech.AudioConfig(
        audio_encoding=texttospeech.AudioEncoding.MP3
    )
    response = client.synthesize_speech(
        input=synthesis_input, voice=voice, audio_config=audio_config
    )
    with open(output, "wb") as out:
        out.write(response.audio_content)


def mp3_set_id3(file: str, artist: str, title: str) -> None:
    """Writes IDv3 Tags"""
    print("[!!] eyed3: Setting ID3 tags")
    mp3 = eyed3.load(file)
    mp3.initTag()
    mp3.tag.artist = artist
    mp3.tag.title = title
    mp3.tag.save()


def save_text_to_file(file: str, text: str) -> None:
    """Saves the text to a txt file"""
    print(f"[!!] Generating sidecar: {file}")
    with open(file, 'w') as fd:
        fd.write(text)


# main
if __name__ == "__main__":
    text = ""
    mp3_generated = False
    use_tesseract = False
    use_espeak_ng = False
    use_google_texttospeech = False
    use_eyed3 = False
    use_sidecar = False

    # parse command line options
    args = parse_cmd_line_arguments()

    # input file
    pdf_file = args['input'][0]
    if not os.path.exists(pdf_file):
        print(f"[EE] Input file '{pdf_file}' does not exist!")
        sys.exit(0)
    num_pages = poppler_get_num_pages(file=pdf_file)

    # output file
    mp3_file = args['output'][0]

    # page_start
    page_start = 1
    if 'page_start' in args and args['page_start'] is not None:
        page_start = int(args['page_start'][0])
        if page_start < 1:
            page_start = 1

    # page_end
    page_end = num_pages
    if 'page_end' in args and args['page_end'] is not None:
        page_end = int(args['page_end'][0])
        if num_pages < page_end:
            page_end = num_pages

    # dpi: tesseract doesn't work well on low dpi images
    dpi = 150
    if 'dpi' in args and args['dpi'] is not None:
        try:
            dpi = int(args['dpi'][0])
        except ValueError:
            dpi = 150

        if dpi < 150:
            dpi = 150

    # tesseract
    tesseract = ""
    if has_tesseract and 'tesseract' in args and args['tesseract'] is not None:
        tesseract = args['tesseract'][0]
        use_tesseract = True

    # espeak-ng
    espeakng = ""
    if has_espeakng and 'espeak_ng' in args and args['espeak_ng'] is not None:
        espeakng = args['espeak_ng'][0]
        use_espeak_ng = True

    # google text-to-speech
    google_key = ""
    google_voice = ""
    google_language_code = ""
    if has_google_texttospeech:
        if 'google_oauth2_key' in args and args['google_oauth2_key'] is not None:
            google_key = args['google_oauth2_key'][0]
        if 'google_texttospeech_voice_name' in args and args['google_texttospeech_voice_name'] is not None:
            google_voice = args['google_texttospeech_voice_name'][0]
        if 'google_texttospeech_language_code' in args and args['google_texttospeech_language_code'] is not None:
            google_language_code = args['google_texttospeech_language_code'][0]
        if google_key != "" and google_voice != "" and google_language_code != "":
            use_google_texttospeech = True

    # use only one speech synthesizer
    if use_espeak_ng and use_google_texttospeech:
        print('[EE] Please use either eSpeak NG or Google Cloud Text-To-Speech!')
        sys.exit(0)

    # eyed3
    mp3_artist = ""
    mp3_title = ""
    if has_eyed3:
        if 'mp3_artist' in args and args['mp3_artist'] is not None:
            mp3_artist = args['mp3_artist']
        if 'mp3_title' in args and args['mp3_title'] is not None:
            mp3_title = args['mp3_title']
        use_eyed3 = True

    # sidecar
    sidecar = ""
    if 'sidecar' in args and args['sidecar'] is not None:
        sidecar = args['sidecar']
        use_sidecar = True

    print(f'[!!] Input file: {pdf_file}, {num_pages} page(s)')
    print(f'[!!] Processing pages {page_start} to {page_end}')

    whole_text = ""
    bar = Progressbar('[!!] Progress', max=(page_end - page_start + 1))

    # main working loop
    for page in range(page_start, page_end + 1):
        bar.next()

        # use tesseract
        if use_tesseract:
            poppler_convert_to_image(file=pdf_file, dpi=dpi, page=page)
            text = tesseract_scan_page(page=page, language=tesseract)
        # or poppler
        else:
            text = poppler_get_text(file=pdf_file, page=page)
            if text == "":
                print(f"\n[EE] No text layer found on page {page}, please use the --tesseract <lang> option to enable OCR!")
                sys.exit(0)

        whole_text += text

        # speech synthesis with eSpeak NG
        if use_espeak_ng:
            espeak_ng_text_to_wav(text=text, voice=espeakng, page=page)
            pydub_convert_to_mp3(page=page)
            mp3_generated = True

        # if Google Cloud Text-To-Speech is preferred
        if use_google_texttospeech:
            google_texttospeech(text=text, output=f'page-{page}.mp3', key=google_key,
                                language_code=google_language_code, voice_name=google_voice)

    bar.finish()

    # concat mp3s
    if has_pydub:
        pydub_concat_mp3s(page_start=page_start, page_end=page_end, mp3_file=mp3_file)

    # add ID3 tags to the output file
    if use_eyed3:
        mp3_set_id3(file=mp3_file, artist=mp3_artist, title=mp3_title)

    # write the whole text to a file if demanded
    if use_sidecar:
        save_text_to_file(sidecar, whole_text)

    print("[!!] Finished!")
